################################## GRAMINE ###################################

# Gramine environment, including the path to the library OS and the debug
# the default is "error" for non-debug builds, and "debug" for debug builds.
loader.entrypoint = "file:{{ gramine.libos }}"
loader.log_level = "{{ log_level }}"

# entrypoint is the MarbleRun premain which then calls the executable in argv0
libos.entrypoint = "premain-libos"

################################# ARGUMENTS ###################################

# MARBLERUN: argv0 must be the path to the actual application
loader.argv = ["redis-server"]

################################# ENV VARS ####################################

loader.env.LD_LIBRARY_PATH = "/lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu"

# Forward EDG environment variables, used by MarbleRun
loader.env.EDG_MARBLE_TYPE = { passthrough = true }
loader.env.EDG_MARBLE_COORDINATOR_ADDR = { passthrough = true }
loader.env.EDG_MARBLE_UUID_FILE = { passthrough = true }
loader.env.EDG_MARBLE_DNS_NAMES = { passthrough = true }

################################## SIGNALS ####################################

# Allow for injecting SIGTERM signal from the host.
sys.enable_sigterm_injection = true

################################# MOUNT FS  ###################################

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAMINE_DIR.
fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },

  # Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by TF-Serving.
  { path = "/usr/lib/x86_64-linux-gnu", uri = "file:/usr/lib/x86_64-linux-gnu" },
  { path = "/lib/x86_64-linux-gnu", uri = "file:/lib/x86_64-linux-gnu" },

  # Host-level directory to NSS files required by Glibc + NSS libs.
  { path = "/etc", uri = "file:/etc" },

  # Mount tensorflow_model_server working directory
  { path = "{{ tf_serving_dir_abspath }}", uri = "file:{{ tf_serving_dir }}"} ,

  # Encrypted files
  { type = "encrypted", path = "ssl.cfg", uri = "file:ssl.cfg", key_name = "tf-key" },
  { type = "encrypted", path = "models/resnet50-v15-fp32/1/saved_model.pb", uri = "file:models/resnet50-v15-fp32/1/saved_model.pb", key_name = "tf-key" },
]

############################### SGX: GENERAL ##################################

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If TF-Serving needs more virtual memory
# than the enclave size, Gramine will not be able to allocate it.
sgx.enclave_size = "4G"

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Gramine also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
#
# We (somewhat arbitrarily) specify 512 threads since TF-Serving is multithreaded.
sgx.max_threads = 512

sgx.debug = true

############################# SGX: TRUSTED FILES ##############################

# SGX trusted libraries and runtime files
sgx.trusted_files = [
    "file:{{ gramine.runtimedir() }}/",
    "file:{{ arch_libdir }}/",
    "file:/usr{{ arch_libdir }}/",
    "file:tensorflow_model_server",
    "file:premain-libos"
]

############################# SGX: ALLOWED FILES ##############################

sgx.allowed_files = [
    "file:/etc/nsswitch.conf",
    "file:/etc/ethers",
    "file:/etc/hosts",
    "file:/etc/group",
    "file:/etc/passwd",
    "file:/etc/services",
    "file:/etc/host.conf",
    "file:/etc/resolv.conf",
    "file:/etc/gai.conf",
    "file:/etc/localtime",
    "file:uuid",
    "file:/tf_server-uid/uuid-file"
]

############################# SGX: Attestation ################################

sgx.remote_attestation = "dcap"
sgx.isvprodid = 15
sgx.isvsvn    = 1
