################################## GRAPHENE ###################################

# Graphene environment, including the path to the library OS and the debug
# the default is "error" for non-debug builds, and "debug" for debug builds.
loader.log_level = "{{ log_level }}"
loader.preload = "file:{{ graphene.libos }}"

# entrypoint is the Marblerun premain which then calls the executable in argv0
libos.entrypoint = "file:premain-graphene"


################################# ARGUMENTS ###################################

# the decryption process is executed first and will call the main executable
# after it has finished
loader.argv0_override = "tensorflow_model_server"


################################# ENV VARS ####################################

# Forward environment variables from the host. Don't use this on production!
loader.insecure__use_host_env = true

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}:/usr{{ arch_libdir }}"


################################## SIGNALS ####################################

# Allow for injecting SIGTERM signal from the host.
sys.enable_sigterm_injection = true


################################# MOUNT FS  ###################################

# Mounted FSes. The following "chroot" FSes mount a part of the host FS into the
# guest. Other parts of the host FS will not be available in the guest.

# Default glibc files, mounted from the Runtime directory in GRAPHENE_DIR.
fs.mount.lib.type = "chroot"
fs.mount.lib.path = "/lib"
fs.mount.lib.uri = "file:{{ graphene.runtimedir() }}"

# Host-level libraries (e.g., /lib/x86_64-linux-gnu) required by TF-Serving.
fs.mount.lib2.type = "chroot"
fs.mount.lib2.path = "{{ arch_libdir }}"
fs.mount.lib2.uri = "file:{{ arch_libdir }}"

# More host-level libraries (e.g., /usr/lib/x86_64-linux-gnu) required by TF-Serving.
fs.mount.lib3.type = "chroot"
fs.mount.lib3.path = "/usr{{ arch_libdir }}"
fs.mount.lib3.uri = "file:/usr{{ arch_libdir }}"

# Host-level directory to NSS files required by Glibc + NSS libs.
fs.mount.etc.type = "chroot"
fs.mount.etc.path = "/etc"
fs.mount.etc.uri = "file:/etc"

# Mount the current working directory
fs.mount.cwd.type = "chroot"
fs.mount.cwd.path = "{{ tf_serving_dir_abspath }}"
fs.mount.cwd.uri = "file:{{ tf_serving_dir }}"


############################### SGX: GENERAL ##################################

# Set the virtual memory size of the SGX enclave. For SGX v1, the enclave
# size must be specified during signing. If TF-Serving needs more virtual memory
# than the enclave size, Graphene will not be able to allocate it.
sgx.enclave_size = "4G"
loader.pal_internal_mem_size = "512M"

# Set the maximum number of enclave threads. For SGX v1, the number of enclave
# TCSes must be specified during signing, so the application cannot use more
# threads than the number of TCSes. Note that Graphene also creates an internal
# thread for handling inter-process communication (IPC), and potentially another
# thread for asynchronous events. Therefore, the actual number of threads that
# the application can create is (sgx.thread_num - 2).
#
# We (somewhat arbitrarily) specify 512 threads since TF-Serving is multithreaded.
sgx.thread_num = 512
sgx.nonpie_binary = true


############################# SGX: TRUSTED FILES ###############################

# SGX trusted libraries

sgx.trusted_files.runtime = "file:{{ graphene.runtimedir() }}"
sgx.trusted_files.arch_libdir = "file:{{ arch_libdir }}/"
sgx.trusted_files.usr_arch_libdir = "file:/usr{{ arch_libdir }}/"

# TF-Serving runtime
sgx.trusted_files.tfexec = "file:tensorflow_model_server"
sgx.trusted_files.premain = "file:premain-graphene"


############################# SGX: ALLOWED FILES ###############################

# Name Service Switch (NSS) files (Attestation dependencies)
sgx.allowed_files.nsswitch = "file:/etc/nsswitch.conf"
sgx.allowed_files.ethers = "file:/etc/ethers"
sgx.allowed_files.hosts = "file:/etc/hosts"
sgx.allowed_files.group = "file:/etc/group"
sgx.allowed_files.passwd = "file:/etc/passwd"
sgx.allowed_files.service = "file:/etc/services"
sgx.allowed_files.hostconf = "file:/etc/host.conf"
sgx.allowed_files.resolvconf = "file:/etc/resolv.conf"
sgx.allowed_files.gaivconf = "file:/etc/gai.conf"
sgx.allowed_files.time = "file:/etc/localtime"


# TF-Serving model
sgx.allowed_files.sslcfg = "file:ssl.cfg"
sgx.protected_files.model = "file:models/resnet50-v15-fp32/1/saved_model.pb"
sgx.allowed_files.uid = "file:uuid"
sgx.allowed_files.injected_uid = "file:/tf_server-uid/uuid-file"


############################# SGX: Attestation ###############################

sgx.remote_attestation = true
sgx.isvprodid = 15
sgx.isvsvn    = 1
